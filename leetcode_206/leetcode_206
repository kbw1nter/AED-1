#include <stdio.h>
#include <stdlib.h>

struct ListNode {
    int val;
    struct ListNode *next;
};

struct ListNode* reverseList(struct ListNode* head) {
    struct ListNode* prev = NULL;    // Ponteiro para nó anterior
    struct ListNode* current = head; // Ponteiro atual
    struct ListNode* next = NULL;    // Ponteiro para próximo nó
    
    while (current != NULL) {
        next = current->next;
        
        current->next = prev;
        
        prev = current;
        current = next;
    }
    
    return prev;
}

struct ListNode* reverseList_Recursive(struct ListNode* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }

    struct ListNode* newHead = reverseList_Recursive(head->next);

    head->next->next = head;
    head->next = NULL;       
    
    return newHead;
}

struct ListNode* createNode(int val) {
    struct ListNode* node = (struct ListNode*)malloc(sizeof(struct ListNode));
    node->val = val;
    node->next = NULL;
    return node;
}

void printList(struct ListNode* head) {
    struct ListNode* current = head;
    while (current != NULL) {
        printf("%d", current->val);
        if (current->next != NULL) {
            printf(" -> ");
        }
        current = current->next;
    }
    printf(" -> NULL\n");
}

struct ListNode* createList(int* arr, int size) {
    if (size == 0) return NULL;
    
    struct ListNode* head = createNode(arr[0]);
    struct ListNode* current = head;
    
    for (int i = 1; i < size; i++) {
        current->next = createNode(arr[i]);
        current = current->next;
    }
    
    return head;
}

void freeList(struct ListNode* head) {
    while (head != NULL) {
        struct ListNode* temp = head;
        head = head->next;
        free(temp);
    }
}

void demonstrateReversal() {
    printf("=== DEMONSTRAÇÃO PASSO A PASSO ===\n\n");
    
    // Lista: 1 -> 2 -> 3 -> NULL
    struct ListNode* node1 = createNode(1);
    struct ListNode* node2 = createNode(2);
    struct ListNode* node3 = createNode(3);
    node1->next = node2;
    node2->next = node3;
    
    printf("Lista original: ");
    printList(node1);
    
    printf("\nProcesso de reversão:\n");
    
    struct ListNode* prev = NULL;
    struct ListNode* current = node1;
    struct ListNode* next = NULL;
    int step = 1;
    
    while (current != NULL) {
        printf("Passo %d:\n", step++);
        printf("  prev = %s, current = %d, next = %s\n", 
               prev ? "exists" : "NULL", 
               current->val,
               current->next ? "exists" : "NULL");
        
        next = current->next;
        current->next = prev;
        
        printf("  Após inversão: current->next agora aponta para prev\n");
        
        prev = current;
        current = next;
        
        printf("  Movendo ponteiros: prev avança, current avança\n\n");
    }
    
    printf("Lista revertida: ");
    printList(prev);
    
    freeList(prev);
}

// =============================================================================
// FUNÇÃO PRINCIPAL DE TESTE
// =============================================================================

int main() {
    printf("=== TESTE DE REVERSÃO DE LISTA LIGADA ===\n\n");
    
    // Teste 1: Lista normal
    int arr1[] = {1, 2, 3, 4, 5};
    struct ListNode* list1 = createList(arr1, 5);
    printf("Teste 1 - Lista original: ");
    printList(list1);
    
    struct ListNode* reversed1 = reverseList(list1);
    printf("Lista revertida (iterativa): ");
    printList(reversed1);
    freeList(reversed1);
    
    // Teste 2: Lista com um elemento
    int arr2[] = {42};
    struct ListNode* list2 = createList(arr2, 1);
    printf("\nTeste 2 - Lista original: ");
    printList(list2);
    
    struct ListNode* reversed2 = reverseList(list2);
    printf("Lista revertida: ");
    printList(reversed2);
    freeList(reversed2);
    
    // Teste 3: Lista vazia
    struct ListNode* list3 = NULL;
    printf("\nTeste 3 - Lista vazia: ");
    printList(list3);
    
    struct ListNode* reversed3 = reverseList(list3);
    printf("Lista revertida: ");
    printList(reversed3);
    
    // Teste 4: Comparação recursiva vs iterativa
    int arr4[] = {1, 2, 3};
    struct ListNode* list4a = createList(arr4, 3);
    struct ListNode* list4b = createList(arr4, 3);
    
    printf("\nTeste 4 - Comparação de métodos:\n");
    printf("Lista original: ");
    printList(list4a);
    
    struct ListNode* iter_result = reverseList(list4a);
    printf("Método iterativo: ");
    printList(iter_result);
    
    struct ListNode* rec_result = reverseList_Recursive(list4b);
    printf("Método recursivo: ");
    printList(rec_result);
    
    freeList(iter_result);
    freeList(rec_result);
    
    printf("\n");
    demonstrateReversal();
    
    return 0;
}